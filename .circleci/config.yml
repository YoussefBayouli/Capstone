version: 2.1

orbs:
  kubernetes: circleci/kubernetes@0.11.2
  aws-eks: circleci/aws-eks@1.0.3

jobs:
  Lint:
    docker:
      - image: ubuntu
    steps:
      - checkout
      - run:
          name: installing Dependencies
          command: |
            apt-get update
            apt-get install tidy -y
            apt-get install wget -y
            wget -O ./hadolint https://github.com/hadolint/hadolint/releases/download/v1.22.1/hadolint-Linux-x86_64
            chmod +x hadolint
            mv hadolint /bin/hadolint
      - run:
          name: Linting blue HTML file
          command: |
            cd blue
            tidy -f errsblue.txt -m index.html
            cat errsblue.txt

      - run:
          name: Linting green HTML file
          command: |
            cd green
            tidy -f errsgreen.txt -m index.html
            cat errsgreen.txt

      - run:
          name: Hadolint Dockerfile
          command: |
            cd blue  
            hadolint --ignore DL3006 Dockerfile
      - run:
          name: Hadolint Dockerfile
          command: |
            cd green 
            hadolint --ignore DL3006 Dockerfile

  Dockerize:
    machine: true
    steps:
      - checkout
      - run:
          name: login docker
          command: |

            echo $DOCKER_PWD | docker login -u $DOCKER_LOGIN --password-stdin

      - run:
          name: Build Image
          command: |
            cd blue
            docker build -t spacegeekops/test_blue_image .
      - run:
          name: Pushing Image to my DockerHub
          command: |
            cd blue
            docker push spacegeekops/test_blue_image

      - run:
          name: Build and push green Docker image
          command: |
            cd green
            docker build -t spacegeekops/test_blue_image .
            docker push spacegeekops/test_blue_image

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum -y install tar gzip
      - run: yum -y install which
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci/Cloudformation
            ls Cloudformation
            chmod +x create-stack.sh 
            ./create-stack.sh newstack EKS.yml EKS-par.json

  Kubectl config:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - kubernetes/install-kubectl
      - run:
          name: aws-iam-authenticator
          command: |
            curl -o aws-iam-authenticator https://amazon-eks.s3-us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator 
            chmod +x ./aws-iam-authenticator
            mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
            echo 'export PATH=$PATH:$HOME/bin' >> ~/.bashrc
            aws-iam-authenticator help
      #Download the Amazon EKS vended aws-iam-authenticator binary from Amazon S3.
      #Check the SHA-256 sum for your downloaded binary.
      #Apply execute permissions to the binary.
      #Copy the binary to a folder in your $PATH. We recommend creating a $HOME/bin/aws-iam-authenticator and ensuring that $HOME/bin comes first in your $PATH.
      #Add $HOME/bin to your PATH environment variable.
      #Test that the aws-iam-authenticator binary works.

      - run:
          name: update kubeconfig
          command: |
            aws sts get-caller-identity
            aws eks update-kubeconfig --name capstone --region us-west-2 --role-arn arn:aws:iam::041315253906:role/aws-service-role/eks.amazonaws.com/AWSServiceRoleForAmazonEKS
            kubectl config view --minify
            kubectl get svc

      - run:
          name: Start Blue Service
          command: |
            aws sts get-caller-identity
            kubectl apply -f ./Blue-controller.json

      - run:
          name: Start Green Service
          command: |
            kubectl apply -f ./Green-controller.json

      - run:
          name: Redirect to Blue
          command: |
            kubectl apply -f ./BlueService.json
workflows:
  default:
    jobs:
      - Lint
      - Dockerize:
          requires: [Lint]
      - deploy-infrastructure:
          requires: [Dockerize]
      - Kubectl config:
          requires: [deploy-infrastructure]
